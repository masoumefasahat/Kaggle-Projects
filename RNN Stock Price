{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":755761,"sourceType":"datasetVersion","datasetId":392005}],"dockerImageVersionId":29855,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-03T18:07:59.141965Z","iopub.execute_input":"2024-08-03T18:07:59.142319Z","iopub.status.idle":"2024-08-03T18:08:00.573307Z","shell.execute_reply.started":"2024-08-03T18:07:59.142253Z","shell.execute_reply":"2024-08-03T18:08:00.572247Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/gooogle-stock-price/Google_Stock_Price_Test.csv\n/kaggle/input/gooogle-stock-price/Google_Stock_Price_Train.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"dataset_train = pd.read_csv(\"/kaggle/input/gooogle-stock-price/Google_Stock_Price_Train.csv\")","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","execution":{"iopub.status.busy":"2024-08-03T18:08:00.575281Z","iopub.execute_input":"2024-08-03T18:08:00.575602Z","iopub.status.idle":"2024-08-03T18:08:00.597833Z","shell.execute_reply.started":"2024-08-03T18:08:00.575541Z","shell.execute_reply":"2024-08-03T18:08:00.596937Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"dataset_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.600682Z","iopub.execute_input":"2024-08-03T18:08:00.601064Z","iopub.status.idle":"2024-08-03T18:08:00.628382Z","shell.execute_reply.started":"2024-08-03T18:08:00.600996Z","shell.execute_reply":"2024-08-03T18:08:00.627238Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"       Date    Open    High     Low   Close      Volume\n0  1/3/2012  325.25  332.83  324.97  663.59   7,380,500\n1  1/4/2012  331.27  333.87  329.08  666.45   5,749,400\n2  1/5/2012  329.83  330.75  326.89  657.21   6,590,300\n3  1/6/2012  328.34  328.77  323.68  648.24   5,405,900\n4  1/9/2012  322.04  322.29  309.46  620.76  11,688,800","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1/3/2012</td>\n      <td>325.25</td>\n      <td>332.83</td>\n      <td>324.97</td>\n      <td>663.59</td>\n      <td>7,380,500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1/4/2012</td>\n      <td>331.27</td>\n      <td>333.87</td>\n      <td>329.08</td>\n      <td>666.45</td>\n      <td>5,749,400</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1/5/2012</td>\n      <td>329.83</td>\n      <td>330.75</td>\n      <td>326.89</td>\n      <td>657.21</td>\n      <td>6,590,300</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1/6/2012</td>\n      <td>328.34</td>\n      <td>328.77</td>\n      <td>323.68</td>\n      <td>648.24</td>\n      <td>5,405,900</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1/9/2012</td>\n      <td>322.04</td>\n      <td>322.29</td>\n      <td>309.46</td>\n      <td>620.76</td>\n      <td>11,688,800</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"train = dataset_train.loc[:,[\"Open\"]].values\ntrain","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.630172Z","iopub.execute_input":"2024-08-03T18:08:00.630534Z","iopub.status.idle":"2024-08-03T18:08:00.642394Z","shell.execute_reply.started":"2024-08-03T18:08:00.630467Z","shell.execute_reply":"2024-08-03T18:08:00.641523Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"array([[325.25],\n       [331.27],\n       [329.83],\n       ...,\n       [793.7 ],\n       [783.33],\n       [782.75]])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ntrain_scaled = scaler.fit_transform(train)\ntrain_scaled","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.646271Z","iopub.execute_input":"2024-08-03T18:08:00.646705Z","iopub.status.idle":"2024-08-03T18:08:00.705365Z","shell.execute_reply.started":"2024-08-03T18:08:00.646632Z","shell.execute_reply":"2024-08-03T18:08:00.704544Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"array([[0.08581368],\n       [0.09701243],\n       [0.09433366],\n       ...,\n       [0.95725128],\n       [0.93796041],\n       [0.93688146]])"},"metadata":{}}]},{"cell_type":"code","source":"plt.plot(train_scaled)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.707167Z","iopub.execute_input":"2024-08-03T18:08:00.707459Z","iopub.status.idle":"2024-08-03T18:08:00.942346Z","shell.execute_reply.started":"2024-08-03T18:08:00.707408Z","shell.execute_reply":"2024-08-03T18:08:00.940823Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"X_train = []\ny_train = []\ntimesteps = 50\nfor i in range(timesteps, 1258):\n    X_train.append(train_scaled[i-timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.944734Z","iopub.execute_input":"2024-08-03T18:08:00.945360Z","iopub.status.idle":"2024-08-03T18:08:00.958871Z","shell.execute_reply.started":"2024-08-03T18:08:00.945117Z","shell.execute_reply":"2024-08-03T18:08:00.957696Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.960829Z","iopub.execute_input":"2024-08-03T18:08:00.961610Z","iopub.status.idle":"2024-08-03T18:08:00.969992Z","shell.execute_reply.started":"2024-08-03T18:08:00.961510Z","shell.execute_reply":"2024-08-03T18:08:00.968982Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(1208, 50, 1)"},"metadata":{}}]},{"cell_type":"code","source":"y_train = y_train.reshape(-1,1)\ny_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.971841Z","iopub.execute_input":"2024-08-03T18:08:00.972527Z","iopub.status.idle":"2024-08-03T18:08:00.981705Z","shell.execute_reply.started":"2024-08-03T18:08:00.972459Z","shell.execute_reply":"2024-08-03T18:08:00.980736Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(1208, 1)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Create Model","metadata":{}},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:00.983617Z","iopub.execute_input":"2024-08-03T18:08:00.984428Z","iopub.status.idle":"2024-08-03T18:08:06.539063Z","shell.execute_reply.started":"2024-08-03T18:08:00.984358Z","shell.execute_reply":"2024-08-03T18:08:06.538099Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"Using TensorFlow backend.\n","output_type":"stream"}]},{"cell_type":"code","source":"regressor = Sequential()\n\nregressor.add(SimpleRNN(units = 45,activation='tanh',recurrent_dropout=True, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.15))\n\nregressor.add(SimpleRNN(units = 45,activation='tanh',recurrent_dropout=True,return_sequences = True))\nregressor.add(Dropout(0.15))\n\nregressor.add(SimpleRNN(units = 45,activation='tanh',recurrent_dropout=True,return_sequences = True))\nregressor.add(Dropout(0.15))\n\nregressor.add(SimpleRNN(units = 45))\nregressor.add(Dropout(0.15))\n\nregressor.add(Dense(units = 1))\n\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\nregressor.fit(X_train, y_train, epochs = 30, batch_size = 32)","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:06.540385Z","iopub.execute_input":"2024-08-03T18:08:06.540682Z","iopub.status.idle":"2024-08-03T18:08:58.686334Z","shell.execute_reply.started":"2024-08-03T18:08:06.540633Z","shell.execute_reply":"2024-08-03T18:08:58.685519Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Epoch 1/30\n1208/1208 [==============================] - 3s 2ms/step - loss: 0.2495\nEpoch 2/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.1737\nEpoch 3/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.1321\nEpoch 4/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0975\nEpoch 5/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0783\nEpoch 6/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0595\nEpoch 7/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0452\nEpoch 8/30\n1208/1208 [==============================] - 2s 2ms/step - loss: 0.0405\nEpoch 9/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0337\nEpoch 10/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0311\nEpoch 11/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0249\nEpoch 12/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0245\nEpoch 13/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0229\nEpoch 14/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0187\nEpoch 15/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0179\nEpoch 16/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0168\nEpoch 17/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0147\nEpoch 18/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0152\nEpoch 19/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0138\nEpoch 20/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0141\nEpoch 21/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0133\nEpoch 22/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0114\nEpoch 23/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0118\nEpoch 24/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0099\nEpoch 25/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0096\nEpoch 26/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0098\nEpoch 27/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0083\nEpoch 28/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0081\nEpoch 29/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0077\nEpoch 30/30\n1208/1208 [==============================] - 2s 1ms/step - loss: 0.0073\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<keras.callbacks.callbacks.History at 0x7f1d106b0f28>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Predictions and Visualising","metadata":{}},{"cell_type":"code","source":"dataset_test = pd.read_csv(\"/kaggle/input/gooogle-stock-price/Google_Stock_Price_Test.csv\")\ndataset_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:58.687754Z","iopub.execute_input":"2024-08-03T18:08:58.688049Z","iopub.status.idle":"2024-08-03T18:08:58.715646Z","shell.execute_reply.started":"2024-08-03T18:08:58.687997Z","shell.execute_reply":"2024-08-03T18:08:58.714685Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"       Date    Open    High     Low   Close     Volume\n0  1/3/2017  778.81  789.63  775.80  786.14  1,657,300\n1  1/4/2017  788.36  791.34  783.16  786.90  1,073,000\n2  1/5/2017  786.08  794.48  785.02  794.02  1,335,200\n3  1/6/2017  795.26  807.90  792.20  806.15  1,640,200\n4  1/9/2017  806.40  809.97  802.83  806.65  1,272,400","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1/3/2017</td>\n      <td>778.81</td>\n      <td>789.63</td>\n      <td>775.80</td>\n      <td>786.14</td>\n      <td>1,657,300</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1/4/2017</td>\n      <td>788.36</td>\n      <td>791.34</td>\n      <td>783.16</td>\n      <td>786.90</td>\n      <td>1,073,000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1/5/2017</td>\n      <td>786.08</td>\n      <td>794.48</td>\n      <td>785.02</td>\n      <td>794.02</td>\n      <td>1,335,200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1/6/2017</td>\n      <td>795.26</td>\n      <td>807.90</td>\n      <td>792.20</td>\n      <td>806.15</td>\n      <td>1,640,200</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1/9/2017</td>\n      <td>806.40</td>\n      <td>809.97</td>\n      <td>802.83</td>\n      <td>806.65</td>\n      <td>1,272,400</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"real_stock_price = dataset_test.loc[:, [\"Open\"]].values\nreal_stock_price.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:58.716880Z","iopub.execute_input":"2024-08-03T18:08:58.717175Z","iopub.status.idle":"2024-08-03T18:08:58.724436Z","shell.execute_reply.started":"2024-08-03T18:08:58.717121Z","shell.execute_reply":"2024-08-03T18:08:58.723534Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"(20, 1)"},"metadata":{}}]},{"cell_type":"code","source":"dataset_total = pd.concat((dataset_train[\"Open\"], dataset_test[\"Open\"]),axis = 0)\ninputs = dataset_total[len(dataset_train)-len(dataset_test)- timesteps:].values.reshape(-1,1)\ninputs = scaler.transform(inputs)\ninputs.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:58.725798Z","iopub.execute_input":"2024-08-03T18:08:58.726096Z","iopub.status.idle":"2024-08-03T18:08:58.737873Z","shell.execute_reply.started":"2024-08-03T18:08:58.726045Z","shell.execute_reply":"2024-08-03T18:08:58.736804Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"(90, 1)"},"metadata":{}}]},{"cell_type":"code","source":"X_test = []\nfor i in range(timesteps, 70):\n    X_test.append(inputs[i-timesteps:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:58.739535Z","iopub.execute_input":"2024-08-03T18:08:58.740050Z","iopub.status.idle":"2024-08-03T18:08:59.085533Z","shell.execute_reply.started":"2024-08-03T18:08:58.739979Z","shell.execute_reply":"2024-08-03T18:08:59.084630Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-03T18:08:59.086855Z","iopub.execute_input":"2024-08-03T18:08:59.087142Z","iopub.status.idle":"2024-08-03T18:08:59.372684Z","shell.execute_reply.started":"2024-08-03T18:08:59.087095Z","shell.execute_reply":"2024-08-03T18:08:59.371294Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}